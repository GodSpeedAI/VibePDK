default:
	@echo "Available recipes: plan-techstack [ts=techstack.yaml], sync-techstack [ts=techstack.yaml], sync-techstack-dry [ts=techstack.yaml]"

# Preview changes to the resolved tech stack (diff only)
plan-techstack ts="techstack.yaml":
	bash scripts/plan_techstack.sh {{ '{{ts}}' }}

# Apply changes to the resolved tech stack (writes .derived JSON)
sync-techstack ts="techstack.yaml":
	bash scripts/sync_techstack.sh {{ '{{ts}}' }}

# Apply (dry-run): no writes, show diff
sync-techstack-dry ts="techstack.yaml":
	bash scripts/sync_techstack.sh --dry-run {{ '{{ts}}' }}

# Linting and Testing
lint-shell:
	pnpm lint:shell
# --- AI-assisted workflows (additive, namespaced) ---


# Bundle AI context for Copilot chat modes
ai-context-bundle:
	bash scripts/bundle-context.sh docs/ai_context_bundle

# TDD phases

# New naming (tdd.*) â€” legacy ai-* retained for familiarity in messages
tdd-red:
	@echo "Red Phase: write failing tests from specs."
	@echo "Open chat mode: tdd.red and reference docs/ai_context_bundle."

tdd-green:
	@echo "Green Phase: implement minimal code to pass tests."
	@echo "Open chat mode: tdd.green and reference docs/ai_context_bundle."

tdd-refactor:
	@echo "Refactor Phase: improve design while keeping tests green."
	@echo "Open chat mode: tdd.refactor and reference docs/ai_context_bundle."

# Debug phases
debug-start:
	@echo "Debug Start: normalize bug report and plan reproduction."
	@echo "Open chat mode: debug.start and reference docs/ai_context_bundle."

debug-repro:
	@echo "Debug Repro: write failing test to reproduce the issue."
	@echo "Open chat mode: debug.repro and reference docs/ai_context_bundle."

debug-isolate:
	@echo "Debug Isolate: narrow root cause using diffs/instrumentation."
	@echo "Open chat mode: debug.isolate and reference docs/ai_context_bundle."

debug-fix:
	@echo "Debug Fix: apply minimal change to make tests pass."
	@echo "Open chat mode: debug.fix and reference docs/ai_context_bundle."

debug-refactor:
	@echo "Debug Refactor: clean up the fix and remove instrumentation."
	@echo "Open chat mode: debug.refactor and reference docs/ai_context_bundle."

debug-regress:
	@echo "Debug Regress: run full regression to ensure stability."
	@echo "Open chat mode: debug.regress and reference docs/ai_context_bundle."

# Validate with existing repo tooling (safe-noop if pnpm/Nx absent)
ai-validate:
	@if command -v pnpm > /dev/null 2>&1; then \
		if [ -f package.json ] && grep -q '"lint"' package.json; then \
			pnpm run lint || true; \
		else \
			echo "No 'lint' script found in package.json. Skipping lint."; \
		fi; \
		if [ -f package.json ] && grep -q '"typecheck"' package.json; then \
			pnpm run typecheck || true; \
		else \
			echo "No 'typecheck' script found in package.json. Skipping typecheck."; \
		fi; \
		if pnpm exec nx --version > /dev/null 2>&1; then \
			pnpm exec nx run-many --target=test --all || true; \
		else \
			echo "Nx not available or no projects to test."; \
		fi; \
	else \
		echo "pnpm not found. Skipping lint/typecheck/test."; \
	fi

# Thin wrapper for Nx generate (prints guidance if pnpm missing)
ai-scaffold name="":
  @if [ -z "{{ '{{name}}' }}" ]; then \
    echo "Usage: just ai:scaffold name=<generator>"; \
    echo "Example: just ai:scaffold name=@nx/js:lib"; \
  else \
    if command -v pnpm > /dev/null 2>&1; then \
      echo "Running: pnpm exec nx g {{ '{{name}}' }}"; \
      pnpm exec nx g {{ '{{name}}' }}; \
    else \
      echo "pnpm not found. Please run: pnpm exec nx g {{ '{{name}}' }}"; \
    fi; \
  fi

# --- Spec-kit integration recipes ---

# Scaffold a feature spec from template
spec-feature thread="" feature_name="" prd_id="":
  bash scripts/spec_scaffold.sh .github/prompts/spec.feature.template.md docs/specs {{thread}} {{feature_name}} "" {{prd_id}}

# Scaffold a plan spec from template based on family
spec-plan thread="" feature_name="" family="" prd_id="" adr_id="" sds_id="" ts_id="" task_id="":
  bash scripts/spec_scaffold.sh .github/prompts/spec.plan.{{family}}.prompt.md docs/specs {{thread}} {{feature_name}} {{family}} {{prd_id}} {{adr_id}} {{sds_id}} {{ts_id}} {{task_id}}

# Scaffold tasks from template
spec-tasks thread="" feature_name="" task_id="":
  bash scripts/spec_scaffold.sh .github/prompts/spec.tasks.template.md docs/specs {{thread}} {{feature_name}} "" "" "" "" "" {{task_id}}

# Lint prompts using existing tool
prompt-lint:
  pnpm run prompt:lint

# Run traceability matrix tool
spec-matrix:
  pnpm run spec:matrix
